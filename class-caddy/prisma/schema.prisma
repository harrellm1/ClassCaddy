// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}



model Student {
    id          String @id @default(cuid())
    firstName   String
    lastName    String
    email       String  @unique
    password    String  
    courses     Course[]
    paidPlan    Boolean
    shifts      Shift[]
    job         Job?
    sport       Sport?
    practices   Practice[]
    events      CalEvent[]
    assingments Assignment[]
}

model Course {
    id                  String @id @default(cuid())
    courseNumber        String
    courseName          String
    courseInstructor    String
    student             Student @relation(fields: [studentId], references:[email])
    studentId           String
    assingments         Assignment[]
    Semester            String
    Year                Int
}

model CalEvent {
    id              String  @id @default(cuid())
    title           String
    studentId       String
    student         Student @relation(fields: [studentId], references: [email])
    start           DateTime
    end             DateTime
    allDay          Boolean
    tag             String
    recurrence      String?
    recurrenceEnd   DateTime?
    recurrenceId    String?  
    shift           Shift? 
    assignment      Assignment?
    practice        Practice?
}


model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  completed   Boolean   @default(false)
  studentId   String 
  courseId    String 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  student     Student   @relation(fields: [studentId], references: [email])
  course      Course    @relation(fields: [courseId], references: [id])
  courseNum   String
  eventId     String    @unique
  event       CalEvent  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Job {
    id          String  @id @default(cuid())
    jobTitle    String
    supervisor  String
    jobPhone    String
    jobEmail    String
    shifts      Shift[]
    studentId   String  @unique
    student     Student @relation (fields: [studentId], references:[email])
}

model Shift {
    id          String      @id @default(cuid())
    start       DateTime
    end         DateTime
    studentId   String
    student     Student     @relation (fields: [studentId], references:[email])
    jobId       String
    job         Job         @relation(fields: [jobId], references:[id])
    eventId     String      @unique
    event       CalEvent    @relation(fields: [eventId], references: [id], onDelete: Cascade)
    notes       String?

}

model Sport {
    id          String  @id @default(cuid())
    sportName   String
    teamName    String
    Coach       String
    coachPhone  String
    coachEmail  String
    studentId   String  @unique
    student     Student @relation (fields: [studentId], references: [email])
    practices   Practice[]
}

model Practice {
    id          String      @id @default(cuid())
    start       DateTime
    end         DateTime
    notes       String?
    sportId     String
    sport       Sport       @relation(fields: [sportId], references: [id])
    studentId   String
    student     Student     @relation(fields: [studentId], references: [email])
    eventId     String      @unique
    event       CalEvent    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}